openapi: 3.0.1
info:
  title: Note Service
  description: 'This is a note service for sharing your notes!'
  termsOfService: http://swagger.io/terms/
  contact:
    email: yulia.markiv.@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
tags:
- name: note
  description: Share your notes
  externalDocs:
    description: Find out more about your notes
    url: http://swagger.io
- name: note_service
  description: Access to your notes
  externalDocs:
    description: Find out more about your notes
    url: http://swagger.io
- name: user
  description: Operations with user
  externalDocs:
    description: Find out more about our users
    url: http://swagger.io
servers:
- url: http://127.0.0.0:5000/api/v2

paths:
  /note:
    post:
        tags:
          - note
        summary: 'Add a note'
        operationId: addNote
        description: Add a note to the system
        responses:
         200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
         401:
          $ref: '#/components/responses/UnauthorizedError'     
        security:
         - note_auth: []
    
      

  /note/{id}:
    get:
      tags:
      - note
      summary: Find note by ID
      description: Returns a single note
      operationId: getNoteById
      parameters:
      - name: id
        in: path
        description: ID of note to return
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        401:
          $ref: '#/components/responses/UnauthorizedError'   
        404:
          description: "Note not found"
      security:
      - note_auth: []
    put:
      tags:
        - note
      summary: 'Edit a note'
      operationId: editNote
      description: edit a note to the system
      parameters:
        - in: path
          name: id
          description: id of note
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'edit note'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Note'
        required: true
      responses:
        201:
          description: note edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        401:
          $ref: '#/components/responses/UnauthorizedError'   
        403:
          description: 'Exceed number of editors'
      security:
      - note_auth: []
  
    delete:
      tags:
      - note
      summary: Deletes a note
      operationId: deleteNote
      parameters:
      - name: id
        in: path
        description: Note id to delete
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "Note not found"
      security:
      - note_auth: []
         
         
         
  /note_service:
    get:
      tags:
      - note_service
      summary: 'Show all your notes'
      operationId: showNote
      description: Show notes
      responses:
        201:
          description: show notes
          content:
             application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Note'
          
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
      - note_auth: []
    
   
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
         description: Created user object
         content:
          'application/json':
            schema:
              $ref: '#/components/schemas/User'
         required: true
      responses:
        200:
          description: "successful operation. User is registered"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "User with such username already exists"
       
  
    
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: string
        401:
          $ref: '#/components/responses/InvalidCredentialsError'
          
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful operation
          
      security:
        - note_auth: []
        
        
        
  /userstatistics/{id}:
    get:
      tags:
      - user
      summary: Get user statistics
      description: Returns user statistics
      operationId: getUserStatistics
      parameters:
      - name: id
        in: path
        required: true
        explode: false
        schema:
          type: integer
      responses:
        200:
          description: Show the user
          content:
             application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteStatistics'
        
        401:
          $ref: '#/components/responses/UnauthorizedError'  
        404:
          description: "User with that id was not found"
      security:
        - note_auth: []
    
  /user/{id}:
    put:
      tags:
        - user
      summary: 'Update a user'
      operationId: updateUser
      description: update a user to the system
      parameters:
        - in: path
          name: id
          description: id of user
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: 'Updated user object.'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
         200:
          description:  "successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
         401:
          $ref: '#/components/responses/UnauthorizedError'
         404:
          description: 'invalid input, object invalid'
      security:
        - note_auth: []
      
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: User id to delete
        required: true
        schema:
          type: integer
          format: int32
      responses:
        200:
          description:  "successful operation. User deleted"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: User not found
      
      security:
        - note_auth: []
          
     
    
        
    
         
components:
  schemas:
    Note:
      required:
      - idUsers
      - tag
      - text
      - idOwner
      type: object
      properties:
        id:
          type: integer
          format: int32
        idUsers:
          type:  array
          format: int32
          items: 
           $ref: '#/components/schemas/NoteStatistics'
          maxLength: 5
          
          
        tag:
          $ref: '#/components/schemas/Tag'
        name:
          type: string
          example: tag
        text:
          type: string
          maxLength: 404
        idOwner:
          type: integer
          format: int32
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        username:
          type: string
        email:
          type: string
    
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
   
          
          
    NoteStatistics:
         required:
         - noteId
         - time
         - userId
         type: object
         properties:
          id:
            type: integer
            format: int32
          noteId:
            type: integer
            format: int32
          time:
            type: string
            format: date-time
          userId:
            type: integer
            format: int32
      
  
  securitySchemes:
    note_auth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: "JWT token was not provided or it is invalid"
    InvalidCredentialsError:
      description: "Provided credentials are invalid"
  
